#!/usr/bin/groovy

pipeline {
    agent any

    options {
        disableConcurrentBuilds()
    }

    stages {

        stage("Build") {
            steps { buildApp() }
		}

        stage("Deploy - Dev") {
            steps { deploy('dev') }
		}

	}
}


// steps
def buildApp() {
	dir ('section_4/code/cd_pipeline' ) {
		def appImage = docker.build("hands-on-jenkins/myapp:${BUILD_NUMBER}")
	}
}

def deploy(environment) {
    def containerName = ''
    def port = ''

    // Verificar el entorno y asignar valores
    if ("${environment}" == 'dev') {
        containerName = "app_dev"
        port = "8888"
    } else {
        println "Invalid environment"
        System.exit(0)
    }

    // Verificar si Docker est√° disponible en Windows
    bat "docker version || exit 1"

    // Detener el contenedor si existe
    try {
        bat "docker ps -f name=${containerName} -q | findstr /R /C:\".*\" | for /F %i in ('findstr /R /C:\".*\"') do (echo Stopping container %i & docker stop %i) || echo No container to stop"
    } catch (Exception e) {
        echo "Error stopping container: ${e.getMessage()}"
        currentBuild.result = 'FAILURE'
        return
    }

    // Eliminar el contenedor si existe
    try {
        bat "docker ps -a -f name=${containerName} -q | findstr /R /C:\".*\" | for /F %i in ('findstr /R /C:\".*\"') do (echo Removing container %i & docker rm %i) || echo No container to remove"
    } catch (Exception e) {
        echo "Error removing container: ${e.getMessage()}"
        currentBuild.result = 'FAILURE'
        return
    }

    // Construir la imagen si no se ha construido
    try {
        bat "docker build -t hands-on-jenkins/myapp:${BUILD_NUMBER} ."
    } catch (Exception e) {
        echo "Error building Docker image: ${e.getMessage()}"
        currentBuild.result = 'FAILURE'
        return
    }

    // Crear y ejecutar el contenedor con la nueva imagen
    try {
        bat "docker run -d -p ${port}:5000 --name ${containerName} hands-on-jenkins/myapp:${BUILD_NUMBER}"
    } catch (Exception e) {
        echo "Error running container: ${e.getMessage()}"
        currentBuild.result = 'FAILURE'
        return
    }
}
