#!/usr/bin/groovy

pipeline {
    agent any

    options {
        disableConcurrentBuilds()
    }

    stages {

        stage("Build") {
            steps { buildApp() }
		}

        stage("Deploy - Dev") {
            steps { deploy('dev') }
		}

	}
}


// steps
def buildApp() {
	dir ('section_4/code/cd_pipeline' ) {
		def appImage = docker.build("hands-on-jenkins/myapp:${BUILD_NUMBER}")
	}
}

def deploy(environment) {
    def containerName = ''
    def port = ''

    // Verificar el entorno y asignar valores
    if ("${environment}" == 'dev') {
        containerName = "app_dev"
        port = "8888"
    } else {
        println "Invalid environment"
        System.exit(0)
    }

    // Verificar si Docker est√° disponible en Windows
    bat "docker version || exit 1"

    bat "docker ps -f name=${containerName} -q | findstr /R /C:\".*\" | for /F %i in ('findstr /R /C:\".*\"') do docker stop %i || echo No container to stop"
    bat "docker ps -a -f name=${containerName} -q | findstr /R /C:\".*\" | for /F %i in ('findstr /R /C:\".*\"') do docker rm %i || echo No container to remove"
    bat "docker run -d -p ${port}:5000 --name ${containerName} hands-on-jenkins/myapp:${BUILD_NUMBER}"

}
